# %%
import pandas as pd
import numpy as np
# %%
# exported from pgsql console on jobs.opensafely.org
df_jobserver = pd.read_csv('workspace_jobs.csv')
print(f"total job records:{len(df_jobserver.index)}")
# %%
# older jobs had Succeeded, newer succeeded
df_jobserver = df_jobserver[df_jobserver.status.str.lower()=='succeeded']
print(f"succeeded job records:{len(df_jobserver.index)}")
# normalise repository identifer
df_jobserver['repo'] = df_jobserver['repo'].str.replace('https://github.com/','')
# cast to numpy datetime for later comparisons
df_jobserver['started_at']=pd.to_datetime(df_jobserver.started_at)
#df_jobserver['started_at'] = df_jobserver['started_at'].dt.date
#%%
# find last sucessful run for each workspace (possible false +ve for non-cohortextractor actions)
df_jobserver = df_jobserver.groupby(['repo','branch']).agg(last_run_time=('started_at',np.max)).reset_index()
print(f"latest run time per workspace:{len(df_jobserver.index)}")
# %%
# generated by ./get_latest_commit.sh
df_latest_commit = pd.read_csv("latest_commit.csv")
df_latest_commit["latest_commit_timestamp"] = pd.to_datetime(df_latest_commit.latest_commit_timestamp)

# %%
# results of git grepping all branches for old vmp ids
## NB needs to be altered to also look for missing amps/affected codelists!
df_branches = pd.read_csv('affected_repository_branches.csv')
print(f"affected code instances in research repos:{len(df_branches.index)}")
# %%
df_branches_vmp = pd.read_csv('oldcodes_deduped.csv')
print(f"VMP change affected code instances in research repos:{len(df_branches_vmp.index)}")

# %%
df_branches_vmp = df_branches_vmp.merge(df_latest_commit,how='left',on=['repository','branch'])
df_branches_vmp[df_branches_vmp.latest_commit_timestamp.isna()][['repository','branch']].drop_duplicates().to_csv('deleted_branches.csv',index=False)

# %%
df_vmp = pd.read_gbq('''SELECT
    vpidprev,vpiddt
  FROM
    `ebmdatalab.dmd.vmp_full`
  WHERE
    vpidprev IS NOT NULL''', project_id='ebmdatalab', dialect='standard')

print(f"expired dmd VMP ids:{len(df_vmp.index)}")
# %%
df_best_before=df_vmp.groupby('vpidprev').agg(bbd=('vpiddt',np.min)).reset_index()
print(f"expired dmd VMP best-before dates:{len(df_best_before.index)}")
# %%
df_branches_vmp = df_branches_vmp.merge(df_best_before,how='inner',left_on='code',right_on='vpidprev')
print(f"instances ∩ best-before:{len(df_branches_vmp.index)}")
df_branches_vmp = df_branches_vmp.groupby(['repository','branch','filename']).agg(bbd=('bbd',np.min),latest_commit_timestamp=('latest_commit_timestamp',np.max)).reset_index()
print(f"max-best-before dates per codelist instance:{len(df_branches.index)}")
# %%
df = df_branches_vmp.merge(df_jobserver,how='left',left_on=('repository','branch'),right_on=('repo','branch'))
print(f"succeeded jobs ∩ codelist best-before dates:{len(df.index)}")
# %%
df_deltas=pd.read_csv('deltas.csv')
# from github.com/opensafely/medication-codelists
print(f"codelist deltas results:{len(df_deltas.index)}")
df_deltas['codelist'] = df_deltas.codelist.str.replace('/','-')
# %%
df['codelist']=df['filename'].str.replace('codelists/','').replace('.csv','')
df['codelist']=df['codelist'].str.replace('.csv','')
# %%
df_branches['repository'] = 'opensafely/' + df_branches.repository
df_branches = df_branches.merge(df_latest_commit,on=['repository','branch'],how='left')
df_branches['filename'] = df_branches.codelist
df_branches['codelist'] = df_branches.filename.str.replace('codelists/','')
# only keep rows where not already in df
df_branches = df_branches[~(df_branches.repository.isin(df.repository)&df_branches.branch.isin(df.branch))]
# %%
df = pd.concat([df,df_branches])
print(f"overall affected branch-codelists {len(df.index)}")

# %%
df = df.merge(df_deltas,on='codelist',how='inner')
print(f"deltas ∩ overall affected branch-codelists:{len(df.index)}")
# %%
df['bbd'] = pd.to_datetime(df.bbd)
df['latest_commit_timestamp'] = pd.to_datetime(df.latest_commit_timestamp,utc=True)
# %%
never_run_repos = set(df['repository'][df.repo.isna()].drop_duplicates()).difference(set(df['repository'][df.repo.notna()].drop_duplicates()))

# %%
#df = df[(df.last_run_time.dt.date>df.bbd)|(df['repository'].isin(never_run_repos)&(df.latest_commit_timestamp.dt.tz_localize(None)>df.bbd))]
df[(df.last_run_time.dt.date>df.bbd)|(df['repository'].isin(never_run_repos)&(df.latest_commit_timestamp.dt.tz_localize(None)>df.bbd))]['delta_vpid']=0
df[(df.last_run_time.dt.date>df.bbd)|(df['repository'].isin(never_run_repos)&(df.latest_commit_timestamp.dt.tz_localize(None)>df.bbd))]['delta_vpid %']=0
#df = df[df.delta>0]
print(f"affected job-codelists:{len(df.index)}")

#%%
df.to_csv('dmd_impact.csv',index=False)
# %%
